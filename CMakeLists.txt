cmake_minimum_required(VERSION 3.16)
project(EverFlow)

set(CMAKE_CXX_STANDARD 14)


# Download and unpack googletest at configure time
configure_file(CMakeLists.txt.in googletest-download/CMakeLists.txt)
execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
        RESULT_VARIABLE result
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download)
if (result)
    message(FATAL_ERROR "CMake step for googletest failed: ${result}")
endif ()

execute_process(COMMAND ${CMAKE_COMMAND} --build .
        RESULT_VARIABLE result
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download)
if (result)
    message(FATAL_ERROR "Build step for googletest failed: ${result}")
endif ()

# Prevent overriding the parent project's compiler/linker settings on Windows
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

# Add googletest directly to our build. This defines the gtest and gtest_main targets.
add_subdirectory(${CMAKE_CURRENT_BINARY_DIR}/googletest-src
        ${CMAKE_CURRENT_BINARY_DIR}/googletest-build
        EXCLUDE_FROM_ALL)

# The gtest/gtest_main targets carry header search path
# dependencies automatically when using CMake 2.8.11 or
# later. Otherwise we have to add them here ourselves.
if (CMAKE_VERSION VERSION_LESS 2.8.11)
    include_directories("${gtest_SOURCE_DIR}/include")
endif ()


# Now simply link against gtest or gtest_main as needed. Eg
add_executable(CoolAlgosTest
        algos/sort/counting_sort_test.cc
        algos/sort/bubble_sort_test.cc
        algos/sort/insert_sort_test.cc
        algos/sort/merge_sort_test.cc
        algos/sort/heap_sort_test.cc
        algos/sort/quick_sort_test.cc
        algos/sort/radix_sort_test.cc
        algos/search/sequence_search_test.cc
        )



target_link_libraries(CoolAlgosTest gtest_main)

add_test(NAME EverFLowTest
        COMMAND EverFLowTest)

# 向工程添加头文件搜索路径
include_directories(${PROJECT_SOURCE_DIR})


#####################
# Generated by CLion

add_executable(algos
        algos/main.cpp
        algos/log.cpp
        algos/util.h
        algos/log.h
        algos/binary_search_tree.h
        )